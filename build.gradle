ext.githubProjectName = "1p-secor-service"

apply plugin: 'java'
apply plugin: 'maven'

// 1p-service stuff - BEGIN
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'distribution'
apply plugin: 'java-library-distribution'
apply plugin: 'os-package'
apply plugin: 'net.researchgate.release'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: 'com.google.protobuf'
// END

// group = 'com.pinterest'
// version = '0.7-SNAPSHOT'

description = """1p-secor-service"""

sourceCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8' // 1p-service stuff
targetCompatibility = 1.8

// 1p-service stuff - BEGIN
task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

apply from: file('codequality/check.gradle')

def permanentPackageName = project.name
def group = 'thomsonreuters-1p'
def rpmRelease = 1
def snapshot = true
if (snapshot) { rpmRelease = 'SNAPSHOT' }

configurations.all {
        resolutionStrategy.cacheDynamicVersionsFor 1, 'hours'
        resolutionStrategy.cacheChangingModulesFor 1, 'hours'

        exclude group: "org.slf4j", module: "slf4j-log4j12"
        //exclude group: "log4j", module: "log4j"

        // Exclude old asm 3.x versions.
        exclude group: 'asm', module: 'asm'
        exclude group: 'asm', module: 'asm-all'

}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/config'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        resources {
            srcDir 'src/test/resources'
        }
        proto {
            srcDir 'src/test/protobuf'
        }
    }
}

test {
  //enable to see logging during gradle build
  //testLogging.showStandardStreams = true
  testLogging {
        events "passed", "skipped", "failed"
  }
}

eclipse {
    classpath {
        downloadSources = true
    }
}

idea {
    module {
        jdkName = '1.8'
        downloadSources = true
    }
}

// END

// Since we need to pull third party jars, we need to wrap around the "classpath" method with "buildscript".
// I suspect we do not have to do it this way but this file is merged from build.gradle from three different
// places,1p-service, 1p-project-templates, and 1p-secor-service
buildscript {
  repositories {

     // 1p-service stuff - BEGIN
     mavenCentral()
     jcenter()
     maven {
       url = "https://clojars.org/repo/"
     }
     maven {
       url 'https://oss.sonatype.org/content/groups/public'
     }
     maven {
       url 'http://kundera.googlecode.com/svn/maven2/maven-missing-resources'
     }

     maven {
       url "http://repo.1p.thomsonreuters.com/nexus/content/repositories/thirdparty/"
     }
     maven {
          url "http://repo.oneplatform.build/nexus/content/repositories/thirdparty-snapshots/"
             } 
     maven {
       url "http://repo.1p.thomsonreuters.com/nexus/content/repositories/snapshots/"
     }
     maven {
       url "http://repo.1p.thomsonreuters.com/nexus/content/repositories/releases/"
     }
     maven {
       url "http://repo.oneplatform.build/nexus/content/groups/public/"
     }
     maven {
       url "http://repo.oneplatform.build/nexus/content/groups/private/"
     }
     // END
     
        
     maven { url "http://maven.twttr.com" }
     maven { url "http://repo.typesafe.com/typesafe/releases" }
     maven { url "http://repo.maven.apache.org/maven2" }
     maven { url "https://plugins.gradle.org/m2/" }
  }

  dependencies {

    // 1p-service stuff - BEGIN
    classpath group: 'com.netflix.nebula',  name: 'gradle-ospackage-plugin', version: '2.2.0'
    classpath group: 'org.jsonschema2pojo', name: 'jsonschema2pojo-gradle-plugin', version: '0.4.+'
    classpath group: 'net.researchgate',    name: 'gradle-release', version: '2.1.1'
    classpath group: 'com.bmuschko',        name: 'gradle-nexus-plugin', version: '2.3'
    classpath group: 'eu.appsatori',        name: 'gradle-fatjar-plugin', version: '0.3'
    classpath group: 'com.thomsonreuters',  name: 'storm-deploy', version: '2.4.+'

    classpath group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: '2.3'
    // END 

    classpath "gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:0.8.1"

  }
}

repositories {

     // 1p-service stuff - BEGIN
     mavenCentral()
     jcenter()
     maven {
       url = "https://clojars.org/repo/"
     }
     maven {
       url 'https://oss.sonatype.org/content/groups/public'
     }
     maven {
       url 'http://kundera.googlecode.com/svn/maven2/maven-missing-resources'
     }

     maven {
       url "http://repo.1p.thomsonreuters.com/nexus/content/repositories/thirdparty/"
     }
     maven {
          url "http://repo.oneplatform.build/nexus/content/repositories/thirdparty-snapshots/"
             } 
     maven {
       url "http://repo.1p.thomsonreuters.com/nexus/content/repositories/snapshots/"
     }
     maven {
       url "http://repo.1p.thomsonreuters.com/nexus/content/repositories/releases/"
     }
     // END
     
        
     maven { url "http://maven.twttr.com" }
     maven { url "http://repo.typesafe.com/typesafe/releases" }
     maven { url "http://repo.maven.apache.org/maven2" }
  }

dependencies {
     // 1p-service stuff - BEGIN
    compile group: 'com.thomsonreuters', name: '1p-service-lib', version: "${servicelib_version}"
    compile group: 'com.thomsonreuters', name: '1p-service-swagger', version: "${servicelib_version}"
    
    compile group: 'com.thomsonreuters', name: '1p-service-api', version: "${servicelib_version}"
    compile group: 'com.thomsonreuters.data', name: '1p-data-event', version: '1.0.2'
    compile group: 'com.thomsonreuters.data', name: '1p-data-util', version: '1.0'
    compile group: 'com.thomsonreuters', name: 'eiddo-client-karyon', version: "0.6.+"
    compile group: 'com.fasterxml.jackson.core',   name: 'jackson-databind',     version: '2.5.+'
    compile group: 'com.fasterxml.jackson.core',   name: 'jackson-annotations',  version: '2.5.+'

    testCompile group:  'junit', name: 'junit-dep', version: '4.11'
    // Jersey test framework
    testCompile 'com.sun.jersey.jersey-test-framework:jersey-test-framework-core:1.11'
    testCompile 'com.sun.jersey.jersey-test-framework:jersey-test-framework-external:1.11'
    // END
    
    compile group: 'com.google.protobuf', name: 'protobuf-java', version:'3.1.0'
    compile group: 'com.google.protobuf', name: 'protobuf-java-util', version:'3.1.0'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version:'1.11.181'
    compile group: 'net.java.dev.jets3t', name: 'jets3t', version:'0.9.4'
    compile(group: 'org.apache.kafka', name: 'kafka_2.10', version:'0.8.2.1') {
        exclude(module: 'slf4j-simple')
    }

    compile group: 'commons-configuration', name: 'commons-configuration', version:'1.9'
    compile group: 'org.apache.hadoop', name: 'hadoop-common', version:'2.7.0'
    compile group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client-core', version:'2.7.0'
    compile(group: 'org.apache.hadoop', name: 'hadoop-aws', version:'2.7.0') {
        exclude(module: 'jets3t')
        exclude(module: 'jackson-annotations')
        exclude(module: 'jackson-core')
        exclude(module: 'jackson-databind')
    }

    compile group: 'org.apache.parquet', name: 'parquet-common', version:'1.8.1'
    compile group: 'org.apache.parquet', name: 'parquet-encoding', version:'1.8.1'
    compile group: 'org.apache.parquet', name: 'parquet-column', version:'1.8.1'
    compile group: 'org.apache.parquet', name: 'parquet-hadoop', version:'1.8.1'
    compile group: 'org.apache.parquet', name: 'parquet-protobuf', version:'1.8.1'
    compile group: 'org.apache.parquet', name: 'parquet-thrift', version:'1.8.1'

    compile group: 'org.apache.hadoop', name: 'hadoop-openstack', version:'2.7.0'
    compile group: 'org.apache.thrift', name: 'libthrift', version:'0.9.3'
    compile group: 'com.twitter', name: 'ostrich_2.10', version:'9.2.1'
    compile group: 'com.twitter.common.zookeeper', name: 'lock', version:'0.0.7'
    compile group: 'com.google.guava', name: 'guava', version:'18.0'
    compile group: 'net.minidev', name: 'json-smart', version:'2.0-RC3'
    compile group: 'org.mockito', name: 'mockito-all', version:'1.9.5'
    compile group: 'org.msgpack', name: 'jackson-dataformat-msgpack', version:'0.7.0-p2'
    compile group: 'com.timgroup', name: 'java-statsd-client', version:'3.0.2'
    compile(group: 'com.google.apis', name: 'google-api-services-storage', version:'v1-rev40-1.20.0') {
       exclude(module: 'guava-jdk5')
    }
    compile group: 'com.microsoft.azure', name: 'azure-storage', version:'4.0.0'

    testCompile group: 'junit', name: 'junit', version:'4.11'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version:'1.5.2'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version:'1.5.2'
}

//packaging tests
task packageTests(type: Jar) {
  from sourceSets.test.output
  classifier = 'tests'
}
artifacts.archives packageTests

// 1p-service stuff - BEGIN
//eiddo repo is the same as project name by default but you can change it
def eiddoRepo = rootProject.name

ospackage {
  packageName = permanentPackageName
  release = rpmRelease
  arch = NOARCH
  os = LINUX
  from(file('root/etc/reuters/karyon')) {
    into('/etc/reuters')
    user 'root'
    permissionGroup 'root'
  }


  from("build/install/"+ permanentPackageName) {
    into('/opt/reuters/apps/karyon')
    user 'karyon'
    permissionGroup 'karyon'

  }
}

buildRpm.dependsOn installDist

sonarqube {
    properties {
        property "sonar.projectName", "1p-data"
        property "sonar.projectKey", "com.thomsonreuters:1p-data"
        property "sonar.branch", System.getenv("GIT_BRANCH") ?: ""
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.exclusions", [
            'src/main/java/com/thomsonreuters/handler/**',
            'src/main/java/com/thomsonreuters/util/**',
            'src/main/java/com/thomsonreuters/server/**',
            'src/main/java/com/thomsonreuters/injection/**',
            'src/main/java/com/thomsonreuters/**/*Module.java',
            'src/main/java/com/thomsonreuters/rest/service/StatusResource.java',
            'src/main/java/com/thomsonreuters/rest/service/HealthcheckResource.java'
        ]
                                                                                                                                                     }
}

jacoco {
    //toolVersion = "0.7.4.+"
    toolVersion = "0.7.5.+"
    reportsDir = file("$buildDir/reports/coverage")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/coverage/html"
    }
}
//END

// Generate the "build.properties" file used by the OstrichService in Secor
task createOstrichProps << {
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            executable = 'git'
            args = ['log', '--pretty=format:%H', '-n1']
            standardOutput = os
       }
       def outputAsString = 'build_revision='+os.toString()
       def buildProps = new File('build/classes/main/com/pinterest/secor/common/build.properties')
       buildProps.write(outputAsString+'\n')
    }
}
processResources.dependsOn createOstrichProps

task svcVersion() << {
    def file = new File("$projectDir/build/svcVersion.txt")
    file.createNewFile()
    file.text = """version=$version
applicationName=.name
"""
}

